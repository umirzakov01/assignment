import exception.CommandArgsException;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.SQLOutput;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

// Press Shift twice to open the Search Everywhere dialog and type `show whitespaces`,
// then press Enter. You can now see whitespace characters in your code.
public class Main {
    private static String Helper_MSG="MyFS 1.0 команды:\n" +
            "ls <path>               выводит список всех файлов и директорий для `path`\n" +
            "ls_py <path>            выводит список файлов с расширением `.py` в `path`\n" +
            "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\n" +
            "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\n" +
            "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\n" +
            "setmod <path> <perm>    устанавливает права для файла `path`\n" +
            "cat <path>              выводит контент файла\n" +
            "append <path>           добавляет строку `# Autogenerated line` в конец `path`\n" +
            "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\n" +
            "greplong <path>         выводит самое длинное слово в файле\n" +
            "help                    выводит список команд и их описание\n" +
            "exit                    завершает работу программы";

    public static void help(){
        System.out.println(Helper_MSG);
    }
    private static String GOODBYE_MSG="Goodbye";
    private static String FOOTER_STRING="Autogenerated line";
    public static void exit(){
        System.out.println(GOODBYE_MSG);
    }
    private static List<String>getArgument(String command){
     String[] args =command.split(" ");
     return Arrays.stream(args).toList();
    }
    private static String getExtention(String fileName){
        if(fileName.indexOf(".")==-1) return "";
return fileName.substring(fileName.indexOf("."));
    }
    public static void listPythonFiles(String path) {
        File file = new File(path);
        File[] files=file.listFiles();
        if(files==null){
            return;
        }
        for(File  currentFile: files){
            if(getExtention(currentFile.getName()).equals(".py")){
                System.out.print(currentFile.getName()+" ");
            }
        }
    }
    public static void isDirectory(String path) {
        File file = new File(path);
     System.out.println(file.isDirectory());

    };
    public static void listDirectory(String path){
        File file = new File(path);
        File[] files=file.listFiles();
        if(files==null){
            return;
        }
        for(File currentFile: files){
            System.out.print(currentFile.getName()+" ");
        }
        System.out.println();

    }

    public static void define(String path) {
        File file = new File(path);
        if (file.isDirectory()) {System.out.print("directory");
return;
        }
else {
    System.out.print("file");


    }}
    public static void printPermissions(String path) {
        File file = new File(path);
        String permission="";
        if(file.canRead()) {
         permission+="r";
        } else{
            permission+="-";

        }
        if(file.canWrite()){
            permission+="w";

        } else{
            permission+="-";

        }
        if(file.canExecute()){
            permission+="x";

        } else{
            permission+="-";

        }
        System.out.print(permission);
    }

    public static void setPermissions(String path,String permissions){
        File file = new File(path);
        boolean isReadable= (permissions.charAt(0)=='r');
        boolean isWritable= (permissions.charAt(1)=='w');
        boolean isExecutable= (permissions.charAt(2)=='x');

        file.setReadable(isReadable);
        file.setWritable(isWritable);
        file.setExecutable(isExecutable);
    }

    public static void printContent(String path) throws Exception{
        File file = new File(path);
        Scanner scanner= new Scanner(file);
        while (scanner.hasNextLine()){
            System.out.println(scanner.nextLine());
        }
        scanner.close();

    }

    public static void appendFooter(String path) throws Exception {
        FileWriter fw = new FileWriter(path,true);
        BufferedWriter bw= new BufferedWriter(fw);
        bw.write(FOOTER_STRING);
        bw.newLine();
        bw.close();


    }

    public static void printLongestWord(String path) throws Exception {
        File file = new File(path);
        Scanner scanner= new Scanner(file);
        String Longestword="";
        while (scanner.hasNextLine()){
            String currentline=scanner.nextLine();
            String[] words= currentline.split(" ");
            for (String word:words){
                if(Longestword.length()<word.length()){
                    Longestword=word;
                }
            }
        }
        scanner.close();
        System.out.println(Longestword);
    }

    public static void createBackup(String path) throws Exception {
        try{
        File file = new File(path);
        String currentDate =new SimpleDateFormat("dd-MM-yyyy").format(new Date());
        Path filePath= Paths.get(path);
        Path bcpath= Paths.get(path+"/tmp"+currentDate+".backup");
        File bcFile= new File(path+"\tmp"+currentDate+".backup");
        Files.copy(filePath,bcpath);}
          catch (FileNotFoundException e) {
            System.err.println("File not found: " + e.getMessage());
            e.printStackTrace();
        }

    }


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
      help();
      boolean isExit= false;
      while(!isExit){
          try {
              System.out.print("> ");
              String command = scanner.nextLine();
              List<String> commandArgs= getArgument(command);
              if (commandArgs.size()<2 && !commandArgs.get(0).equals("help") && !commandArgs.get(0).equals("exit")) throw new CommandArgsException("not enough args");
             switch(commandArgs.get(0)){
                 case "ls" ->{
                     listDirectory(commandArgs.get(1));
                 }
                 case "ls_py"->{
                     listPythonFiles(commandArgs.get(1));
                 }
                 case "help" ->{
                     help();
                 }
                 case "setmode"->{
                     setPermissions(commandArgs.get(1),commandArgs.get(2));
                 }
                 case "exit" ->{
                  exit();
                  isExit=true;
                 }
                 case "cat" ->{
                     printContent(commandArgs.get(1));
                 }
                 case "append"->{
                     appendFooter(commandArgs.get(1));
                 }
                 case "is_dir" -> isDirectory(commandArgs.get(1));
                 case "define" -> define(commandArgs.get(1));
                 case "readmod"-> printPermissions(commandArgs.get(1));
                 case "greplong"-> printLongestWord(commandArgs.get(1));
                 case "bc"-> createBackup(commandArgs.get(1));

             }
          }
          catch(Exception e){
              System.out.println(e.getMessage());

          }
      }
    }
}